{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentType": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "basic",
        "prod"
      ]
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "Stag",
      "allowedValues": [
        "Dev",
        "QA",
        "Prod",
        "Stag"
      ]
    },
    "otisTargetRegion": {
      "type": "string",
      "defaultValue": "US",
      "allowedValues": [
        "US",
        "EU",
        "CA"
      ]
    },
    "tagValues": {
      "type": "object",
      "defaultValue": {
        "Environment Name": "Dev",
        "Otis Region": "US",
        "Application": "G3MS"
      }
    },
    "serviceBusTopicName": {
      "type": "string",
      "defaultValue": "sbtopicname",
      "metadata": {
        "description": "Comma seperated Topic Names"
      }
    },
    "redisCacheType": {
      "type": "string",
      "defaultValue": "basic",
      "allowedValues": [
        "basic",
        "standard",
        "prod"
      ]
    },
    "hostingPlanName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "HostPlan"
    },
    "webAppType": {
      "type": "string",
      "defaultValue": "basic",
      "allowedValues": [
        "basic",
        "standard",
        "prod"
      ]
    },
    "administratorLogin": {
      "type": "string",
      "defaultValue": "otisadmin"
    },
    "administratorLoginPassword": {
      "type": "securestring"
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "g3msdb"
    },
    "collation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
    },
    "edition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "maxSizeBytes": {
      "type": "string",
      "defaultValue": "1073741824"
    },
    "requestedServiceObjectiveName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "S0",
        "S1",
        "S2",
        "P1",
        "P2",
        "P3"
      ],
      "metadata": {
        "description": "Describes the performance level for Edition"
      }
    },
    "iotSkuName": {

      "type": "string",

      "allowedValues": [

        "F1",

        "S1",

        "S2"

      ],

      "defaultValue": "F1",

      "metadata": {

        "description": "One of the supported SKUs: F1, S1 or S2"

      }

    },
    "capacityUnits": {

      "type": "int",

      "minValue": 1,

      "defaultValue": 1,

      "metadata": {

        "description": "Number of desired IoT Hub units. Restricted to 1 unit for F1. Can be set up to maximum number allowed for subscription."

      }

    },
    "d2cMessageRetentionInDaysPeriod": {

      "type": "int",

      "minValue": 1,

      "maxValue": 7,

      "defaultValue": 1,

      "metadata": {

        "description": "Retention time in days for device-to-cloud messages."

      }

    },
    "d2cPartitionCount": {

      "type": "int",

      "minValue": 2,

      "defaultValue": 2,

      "metadata": {

        "description": "Number of desired partitions for device-to-cloud event ingestion."

      }

    },
    "c2dMessagesTTLAsIso8601": {

      "type": "string",

      "defaultValue": "PT1H",

      "metadata": {

        "description": "Default TTL in ISO_8601 format for cloud-to-device messages. The value can range from PT1M to PT2D (or any other format as per ISO_8601 standards for duration)."

      }

    },
    "c2dMessagesMaxDeliveryCount": {

      "type": "int",

      "minValue": 1,

      "maxValue": 100,

      "defaultValue": 10,

      "metadata": {

        "description": "Maximum delivery count for cloud-to-device messages per-device queues."

      }

    },
    "c2dFeebackMessagesTTLAsIso8601": {

      "type": "string",

      "defaultValue": "PT1H",

      "metadata": {

        "description": "TTL in ISO_8601 format for service-bound feedback messages. The value can range from PT1M to PT2D (or any other format as per ISO_8601 standards for duration)."

      }

    },
    "c2dFeedbackMessagesMaxDeliveryCount": {

      "type": "int",

      "minValue": 1,

      "maxValue": 100,

      "defaultValue": 10,

      "metadata": {

        "description": "Maximum delivery count for feedback queue."

      }

    },
    "c2dFeedbackMessagesLockDurationAsIso8601": {

      "type": "string",

      "defaultValue": "PT60S",

      "metadata": {

        "description": "Lock duration in ISO_8601 format for service-bound feedback messages. The value can range from PT5S to PT300S (or any other format as per ISO_8601 standards for duration)."

      }

    },
    "d2cConsumerGroupName": {

      "type": "string",

      "minLength": 3,

      "defaultValue": "cg1",

      "metadata": {

        "description": "Name of device-to-cloud consumer group to provision on the IoT Hub instance."

      }

    }
  },
  "variables": {
    "environmentSettings": {
      "basic": {
        "sqlEdition": "Basic",
        "sqlRequestedServiceObjectiveName": "Basic"
      },
      "prod": {
        "sqlEdition": "Standard",
        "sqlRequestedServiceObjectiveName": "S2"
      }
    },
    "currentEnvironmentSettings": "[variables('environmentSettings')[parameters('environmentType')]]",
    "redisCacheSettings": {
      "basic": {
        "redisCapacity": 1,
        "redisFamily": "C",
        "redisName": "Basic"
      },
      "standard": {
        "redisCapacity": 1,
        "redisFamily": "C",
        "redisName": "Standard"
      },
      "prod": {
        "redisCapacity": 1,
        "redisFamily": "P",
        "redisName": "Premium"
      }
    },
    "currentRedisCacheSettings": "[variables('redisCacheSettings')[parameters('redisCacheType')]]",
    "webAppSettings": {
      "basic": {
        "webAppCapacity": 1,
        "webAppName": "B1"
      },
      "standard": {
        "webAppCapacity": 1,
        "webAppName": "S1"
      },
      "prod": {
        "webAppCapacity": 1,
        "webAppName": "P1"
      }
    },
    "currentWebAppSettings": "[variables('webAppSettings')[parameters('webAppType')]]",
    "resourceNameSuffix": "[concat(parameters('environmentName'),'-',variables('otisApplicationName'),'-',parameters('otisTargetRegion'),'-', uniqueString(resourceGroup().id))]",
    "otisApplicationName": "G3MS",
    "appServicePlanName": "[concat('ASP-',variables('resourceNameSuffix'))]",
    "webSiteName": "[concat('WA-', variables('resourceNameSuffix'))]",
    "sqlserverName": "[toLower(concat('SQLS-',variables('resourceNameSuffix')))]",
    "redisCacheName": "[concat('RC-',variables('resourceNameSuffix'))]",
    "serviceBusNamespaceName": "[concat('SB-',variables('resourceNameSuffix'))]",
    "TopicNames": "[split(parameters('serviceBusTopicName'), ',')]",
    "iotApiVersion": "2016-02-03",
    "iotHubName": "[concat('IH-',variables('resourceNameSuffix'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('redisCacheName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tagValues')]",
      "properties": {
        "enableNonSslPort": false,
        "sku": {
          "capacity": "[variables('currentRedisCacheSettings').redisCapacity]",
          "family": "[variables('currentRedisCacheSettings').redisFamily]",
          "name": "[variables('currentRedisCacheSettings').redisName]"
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('serviceBusNamespaceName')]",
      "type": "Microsoft.ServiceBus/namespaces",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tagValues')]",
      "properties": {
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[concat(variables('serviceBusNamespaceName'), '/', variables('TopicNames')[copyIndex()])]",
      "type": "Microsoft.ServiceBus/namespaces/topics",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
      ],
      "copy": {
        "name": "TopicNameCopy",
        "count": "[length(variables('TopicNames'))]"
      },
      "properties": {
        "path": "[variables('TopicNames')[copyIndex()]]"
      }
    },
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tagValues')]",
      //"tags": {
      //  "displayName": "SqlServer",
      //},
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
      },
      "resources": [
        {
          "name": "[parameters('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "properties": {
            "edition": "[variables('currentEnvironmentSettings').sqlEdition]",
            "collation": "[parameters('collation')]",
            "maxSizeBytes": "[parameters('maxSizeBytes')]",
            "requestedServiceObjectiveName": "[variables('currentEnvironmentSettings').sqlrequestedServiceObjectiveName]"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      //"tags": {
      //  "displayName": "HostingPlan",
      //  "tags": "[parameters('tagValues')]"
      //},
      "sku": {
        "name": "[variables('currentWebAppSettings').webAppName]",
        "capacity": "[variables('currentWebAppSettings').webAppCapacity]"
      },
      "properties": {
        "name": "[variables('appServicePlanName')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', variables('appServicePlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "empty",
        "displayName": "Website"
      },
      "properties": {
        "name": "[variables('webSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "connectionstrings",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites/', variables('webSiteName'))]"
          ],
          "properties": {
            "DefaultConnection": {
              "value": "[concat('Data Source=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('administratorLogin'), '@', variables('sqlserverName'), ';Password=', parameters('administratorLoginPassword'), ';')]",
              "type": "SQLServer"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('appServicePlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource",
        "displayName": "AutoScaleSettings"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": false,
        "name": "[concat(variables('appServicePlanName'), '-', resourceGroup().name)]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ServerErrors ', variables('webSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
        "displayName": "ServerErrorsAlertRule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', variables('webSiteName'))]",
        "description": "[concat(variables('webSiteName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 0.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
        "displayName": "ForbiddenRequestsAlertRule"
      },
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
        "description": "[concat(variables('webSiteName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('CPUHigh ', variables('appServicePlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource",
        "displayName": "CPUHighAlertRule"
      },
      "properties": {
        "name": "[concat('CPUHigh ', variables('appServicePlanName'))]",
        "description": "[concat('The average CPU is high across all the instances of ', variables('appServicePlanName'))]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
            "metricName": "CpuPercentage"
          },
          "operator": "GreaterThan",
          "threshold": 90,
          "windowSize": "PT15M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('LongHttpQueue ', variables('appServicePlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource",
        "displayName": "AutoScaleSettings"
      },
      "properties": {
        "name": "[concat('LongHttpQueue ', variables('appServicePlanName'))]",
        "description": "[concat('The HTTP queue for the instances of ', variables('appServicePlanName'), ' has a large number of pending requests.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
            "metricName": "HttpQueueLength"
          },
          "operator": "GreaterThan",
          "threshold": 100.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Insights/components",
      "location": "East US",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "ApplicationId": "[variables('webSiteName')]"
      }
    },
    {
      "apiVersion": "[variables('iotApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('iotHubName')]",
      "properties": {
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": "[parameters('d2cMessageRetentionInDaysPeriod')]",
            "partitionCount": "[parameters('d2cPartitionCount')]"
          }
        },
        "cloudToDevice": {
          "defaultTtlAsIso8601": "[parameters('c2dMessagesTTLAsIso8601')]",
          "maxDeliveryCount": "[parameters('c2dMessagesMaxDeliveryCount')]",
          "feedback": {
            "maxDeliveryCount": "[parameters('c2dFeedbackMessagesMaxDeliveryCount')]",
            "ttlAsIso8601": "[parameters('c2dFeebackMessagesTTLAsIso8601')]",
            "lockDurationAsIso8601": "[parameters('c2dFeedbackMessagesLockDurationAsIso8601')]"
          }
        },
        "location": "[resourceGroup().location]"
      },
      "sku": {
        "name": "[parameters('iotSkuName')]",
        "capacity": "[parameters('capacityUnits')]"
      },
      "type": "Microsoft.Devices/iotHubs"
    },
    {

      "apiVersion": "[variables('iotApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Devices/iothubs/', variables('iotHubName'))]"
      ],
      "name": "[concat(variables('iotHubName'), '/events/',parameters('d2cConsumerGroupName'))]",
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups"
    }
  ],
  "outputs": {
    "webApp": {
      "value": "[reference(resourceId('Microsoft.Web/sites',variables('webSiteName')))]",
      "type": "object"
    },
    "webAppConnectionString=": {
      "value": "[concat('Data Source=tcp:', reference(resourceId('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('administratorLogin'), '@', variables('sqlserverName'), ';Password=', parameters('administratorLoginPassword'), ';')]",
      "type": "string"
    },
    "redisCache=": {
      "type": "object",
      "value": "[reference(variables('redisCacheName'))]"
    },
    "serviceBus=": {
      "type": "object",
      "value": "[reference(variables('serviceBusNamespaceName'))]"
    },
    "sqlServer=": {
      "type": "object",
      "value": "[reference(variables('sqlserverName'))]"
    },
    "DatabaseConnectionString=": {
      "type": "string",
      "value": "[concat('Server=tcp:',reference(variables('sqlserverName')).fullyQualifiedDomainName,',1433;Initial Catalog=',parameters('databaseName'),';Persist Security Info=False;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
    },
    "iotHub=": {
      "value": "[reference(resourceId('Microsoft.Devices/IoTHubs',variables('iotHubName')))]",
      "type": "object"
    }
  }
}